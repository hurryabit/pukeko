let repeat xs =
  let rec ys = append xs ys in
  ys

let psums =
  let rec psums0 n xs =
    match xs with
    | Nil -> Nil
    | Cons x xs ->
      let y = x + n in
      Cons y (psums0 y xs)
  in
  psums0 0

let filter p =
  let rec filter_p xs =
    match xs with
    | Nil -> Nil
    | Cons x xs ->
      let ys = filter_p xs in
      if p x then Cons x ys else ys
  in
  filter_p

let rec sieve ks =
  match ks with
  | Nil -> abort
  | Cons p ks -> Cons p (sieve (filter (fun k -> k % p != 0) ks))

let primes = Cons 2 (Cons 3 (sieve (psums (Cons 5 (repeat (Cons 2 (Cons 4 Nil)))))))

let main = print (nth primes 5999)
