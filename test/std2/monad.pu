-- The monad class and some useful functions for monads
import std2/basic
import std2/functor
import std2/list

class (Functor m) <= Monad m where
  pure :: a -> m a
  bind :: m a -> (a -> m b) -> m b

infix >>= bind

semi :: (Monad m) => m Unit -> m a -> m a
semi m1 m2 = m1 >>= fun x -> m2

infix ; semi

sequence :: (Monad m) => List (m a) -> m (List a)
sequence ms =
  match ms with
  | Nil -> pure Nil
  | Cons m ms ->
      m
      >>= fun x ->
      sequence ms
      >>= fun xs ->
      pure (Cons x xs)

traverse_ :: (Monad m, Foldable t) => (a -> m Unit) -> t a -> m Unit
traverse_ f = foldr (fun x m -> f x; m) (pure Unit)

when :: (Monad m) => Bool -> m Unit -> m Unit
when p m = if p then m else pure Unit
