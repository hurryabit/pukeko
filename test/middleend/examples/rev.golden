data Unit =
       | Unit
data Bool =
       | False
       | True
data Pair a b =
       | Pair a b
data Option a =
       | None
       | Some a
data Choice a b =
       | First a
       | Second b
data Eq a =
       | .Eq (a -> a -> Bool)
data Ord a =
       | .Ord (Eq a) (a -> a -> Bool) (a -> a -> Bool) (a -> a -> Bool) (a -> a -> Bool)
data Monoid m =
       | .Monoid m (m -> m -> m)
data Ring a =
       | .Ring (a -> a) (a -> a -> a) (a -> a -> a) (a -> a -> a)
data Char
data Functor f =
       | .Functor (forall a b. (a -> b) -> f a -> f b)
data Foldable t =
       | .Foldable (forall a b. (a -> b -> b) -> b -> t a -> b) (forall a b. (b -> a -> b) -> b -> t a -> b)
data List a =
       | Nil
       | Cons a (List a)
data Monad m =
       | .Monad (Functor m) (forall a. a -> m a) (forall a b. m a -> (a -> m b) -> m b)
data World
data IO a = World -> Pair a World
external lt_int :: Int -> Int -> Bool = "lt"
external ord :: Char -> Int = "ord"
external chr :: Int -> Char = "chr"
external seq :: forall a b. a -> b -> b = "seq"
external putc :: Int -> Unit = "putc"
external getc :: Unit -> Int = "getc"
functorIO :: Functor IO = .Functor @IO functorIO.map.L2
monadIO :: Monad IO =
  .Monad @IO functorIO monadIO.pure.L2 monadIO.bind.L2
putChar :: Char -> IO Unit = io.L2 @Char @Unit putChar.L1
getChar :: IO (Option Char) =
  coerce @(_ -> IO) (io.L1 @Unit @(Option Char) getChar.L1 Unit)
read :: List Char -> IO (List Char) =
  \(cs :: List Char) ->
    let f :: Option Char -> IO (List Char) = read.L1 cs in
    coerce
      @(_ -> IO) (monadIO.bind.L1 @(Option Char) @(List Char) getChar f)
main :: IO Unit =
  let mx :: IO (List Char) = read (Nil @Char) in
  let f :: List Char -> IO Unit =
        foldableList.foldr.L1
          @Char
          @(IO Unit)
          (traverse_.L1 @Char @IO monadIO putChar)
          (coerce @(_ -> IO) (Pair @Unit @World Unit))
  in
  coerce @(_ -> IO) (monadIO.bind.L1 @(List Char) @Unit mx f)
foldableList.foldr.L1 :: forall a b. (a -> b -> b) -> b -> List a -> b =
  \@a @b (f :: a -> b -> b) (y0 :: b) (xs :: List a) ->
    case xs of
    | Nil -> y0
    | Cons x xs -> f x (foldableList.foldr.L1 @a @b f y0 xs)
semi.L1 :: forall a m. m a -> Unit -> m a =
  \@a @m (m2 :: m a) (x :: Unit) -> m2
semi.L2 :: forall a m. Monad m -> m Unit -> m a -> m a =
  \@a @m (monad.m :: Monad m) (m1 :: m Unit) (m2 :: m a) ->
    (case monad.m of
     | .Monad _ _ bind -> bind)
      @Unit @a m1 (semi.L1 @a @m m2)
traverse_.L1 :: forall a m. Monad m -> (a -> m Unit) -> a -> m Unit -> m Unit =
  \@a @m (monad.m :: Monad m) (f :: a -> m Unit) (x :: a) ->
    semi.L2 @Unit @m monad.m (f x)
functorIO.map.L1 :: forall a b. (a -> b) -> IO a -> World -> Pair b World =
  \@a @b (f :: a -> b) (mx :: IO a) (world0 :: World) ->
    case coerce @(IO -> _) mx world0 of
    | Pair x world1 -> Pair @b @World (f x) world1
functorIO.map.L2 :: forall a b. (a -> b) -> IO a -> IO b =
  \@a @b (f :: a -> b) (mx :: IO a) ->
    coerce @(_ -> IO) (functorIO.map.L1 @a @b f mx)
monadIO.pure.L2 :: forall a. a -> IO a =
  \@a (x :: a) -> coerce @(_ -> IO) (Pair @a @World x)
monadIO.bind.L1 :: forall a b. IO a -> (a -> IO b) -> World -> Pair b World =
  \@a @b (mx :: IO a) (f :: a -> IO b) (world0 :: World) ->
    case coerce @(IO -> _) mx world0 of
    | Pair x world1 -> coerce @(IO -> _) (f x) world1
monadIO.bind.L2 :: forall a b. IO a -> (a -> IO b) -> IO b =
  \@a @b (mx :: IO a) (f :: a -> IO b) ->
    coerce @(_ -> IO) (monadIO.bind.L1 @a @b mx f)
io.L1 :: forall a b. (a -> b) -> a -> World -> Pair b World =
  \@a @b (f :: a -> b) (x :: a) (world :: World) ->
    let y :: b = f x in
    seq @b @(Pair b World) y (Pair @b @World y world)
io.L2 :: forall a b. (a -> b) -> a -> IO b =
  \@a @b (f :: a -> b) (x :: a) ->
    coerce @(_ -> IO) (io.L1 @a @b f x)
putChar.L1 :: Char -> Unit = \(c :: Char) -> putc (ord c)
getChar.L1 :: Unit -> Option Char =
  \(u :: Unit) ->
    let n :: Int = getc u in
    case lt_int n 0 of
    | False -> Some @Char (chr n)
    | True -> None @Char
read.L1 :: List Char -> Option Char -> IO (List Char) =
  \(cs :: List Char) (c_opt :: Option Char) ->
    case c_opt of
    | None -> coerce @(_ -> IO) (Pair @(List Char) @World cs)
    | Some c -> read (Cons @Char c cs)
================================================================================
asm lt
asm ord
asm chr
asm seq
asm putc
asm getc
let functorIO = Pack{0,1} @functorIO.map.L2
let monadIO =
  Pack{0,3} @functorIO @monadIO.pure.L2 @monadIO.bind.L2
let putChar = @io.L2 @putChar.L1
let getChar = @io.L1 @getChar.L1 Pack{0,0}
let read cs =
  let f = @read.L1 cs[1] in
  @monadIO.bind.L1 @getChar f[1]
let main =
  let mx = @read Pack{0,0} in
  let f =
        @foldableList.foldr.L1 (@traverse_.L1 @monadIO @putChar) (Pack{0,2} Pack{0,0})
  in
  @monadIO.bind.L1 mx[2] f[1]
let foldableList.foldr.L1 f y0 xs =
  match xs[1] with
  | {0} -> y0[2]
  | {1} x xs -> f[5] x[2] (@foldableList.foldr.L1 f[5] y0[4] xs[1])
let semi.L1 m2 x = m2[2]
let semi.L2 monad.m m1 m2 =
  (match monad.m[3] with
   | {0} _ _ bind -> bind[1]) m1[2] (@semi.L1 m2[1])
let traverse_.L1 monad.m f x = @semi.L2 monad.m[3] (f[2] x[1])
let functorIO.map.L1 f mx world0 =
  match mx[2] world0[1] with
  | {0} x world1 -> Pack{0,2} (f[5] x[2]) world1[1]
let functorIO.map.L2 f mx = @functorIO.map.L1 f[2] mx[1]
let monadIO.pure.L2 x = Pack{0,2} x[1]
let monadIO.bind.L1 mx f world0 =
  match mx[3] world0[1] with
  | {0} x world1 -> (f[4] x[2]) world1[1]
let monadIO.bind.L2 mx f = @monadIO.bind.L1 mx[2] f[1]
let io.L1 f x world =
  let y = f[3] x[2] in
  $seq y[1] (Pack{0,2} y[1] world[2])
let io.L2 f x = @io.L1 f[2] x[1]
let putChar.L1 c = $putc ($ord c[1])
let getChar.L1 u =
  let n = $getc u[1] in
  match $lt n[1] 0 with
  | {0} -> Pack{1,1} ($chr n[1])
  | {1} -> Pack{0,0}
let read.L1 cs c_opt =
  match c_opt[1] with
  | {0} -> Pack{0,2} cs[2]
  | {1} c -> @read (Pack{1,2} c[1] cs[3])
