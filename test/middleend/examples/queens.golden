data Unit =
       | Unit
data Bool =
       | False
       | True
data Pair a b =
       | Pair a b
data Option a =
       | None
       | Some a
data Choice a b =
       | First a
       | Second b
data Eq a =
       | .Eq (a -> a -> Bool)
data Ord a =
       | .Ord (Eq a) (a -> a -> Bool) (a -> a -> Bool) (a -> a -> Bool) (a -> a -> Bool)
data Monoid m =
       | .Monoid m (m -> m -> m)
data Ring a =
       | .Ring (a -> a) (a -> a -> a) (a -> a -> a) (a -> a -> a)
data Char
data Functor f =
       | .Functor (forall a b. (a -> b) -> f a -> f b)
data Foldable t =
       | .Foldable (forall a b. (a -> b -> b) -> b -> t a -> b) (forall a b. (b -> a -> b) -> b -> t a -> b)
data List a =
       | Nil
       | Cons a (List a)
data Monad m =
       | .Monad (Functor m) (forall a. a -> m a) (forall a b. m a -> (a -> m b) -> m b)
data World
data IO a = World -> Pair a World
external eq_int :: Int -> Int -> Bool = "eq"
external lt_int :: Int -> Int -> Bool = "lt"
external le_int :: Int -> Int -> Bool = "le"
external add_int :: Int -> Int -> Int = "add"
external sub_int :: Int -> Int -> Int = "sub"
external seq :: forall a b. a -> b -> b = "seq"
external puti :: Int -> Unit = "puti"
external geti :: Unit -> Int = "geti"
monoidInt :: Monoid Int = .Monoid @Int monoidInt.empty add_int
print :: Int -> IO Unit = io.L2 @Int @Unit puti
input :: IO Int = coerce @(_ -> IO) (io.L1 @Unit @Int geti Unit)
main :: IO Unit =
  coerce @(_ -> IO) (monadIO.bind.L1 @Int @Unit input main.L1)
monoidInt.empty :: Int = 0
monoidList.empty :: forall a. List a = Nil
foldMap.L1 :: forall a m. Monoid m -> (a -> m) -> a -> m -> m =
  \@a @m (monoid.m :: Monoid m) (f :: a -> m) (x :: a) ->
    (case monoid.m of
     | .Monoid _ append -> append)
      (f x)
length.L1 :: forall a. a -> Int = \@a (x :: a) -> 1
monoidList.append.L1 :: forall a. List a -> List a -> List a =
  \@a (xs :: List a) (ys :: List a) ->
    foldableList.foldr.L1 @a @(List a) (Cons @a) ys xs
functorList.map.L1 :: forall a b. (a -> b) -> List a -> List b =
  \@a @b (f :: a -> b) (xs :: List a) ->
    case xs of
    | Nil -> Nil @b
    | Cons x xs -> Cons @b (f x) (functorList.map.L1 @a @b f xs)
foldableList.foldr.L1 :: forall a b. (a -> b -> b) -> b -> List a -> b =
  \@a @b (f :: a -> b -> b) (y0 :: b) (xs :: List a) ->
    case xs of
    | Nil -> y0
    | Cons x xs -> f x (foldableList.foldr.L1 @a @b f y0 xs)
replicate.L1 :: forall a. Int -> a -> List a =
  \@a (n :: Int) (x :: a) ->
    case le_int n 0 of
    | False -> Cons @a x (replicate.L1 @a (sub_int n 1) x)
    | True -> Nil @a
zip_with.L1 :: forall a b c. (a -> b -> c) -> List a -> List b -> List c =
  \@a @b @c (f :: a -> b -> c) (xs :: List a) (ys :: List b) ->
    case xs of
    | Nil -> Nil @c
    | Cons x xs ->
      case ys of
      | Nil -> Nil @c
      | Cons y ys -> Cons @c (f x y) (zip_with.L1 @a @b @c f xs ys)
monadIO.bind.L1 :: forall a b. IO a -> (a -> IO b) -> World -> Pair b World =
  \@a @b (mx :: IO a) (f :: a -> IO b) (world0 :: World) ->
    case coerce @(IO -> _) mx world0 of
    | Pair x world1 -> coerce @(IO -> _) (f x) world1
io.L1 :: forall a b. (a -> b) -> a -> World -> Pair b World =
  \@a @b (f :: a -> b) (x :: a) (world :: World) ->
    let y :: b = f x in
    seq @b @(Pair b World) y (Pair @b @World y world)
io.L2 :: forall a b. (a -> b) -> a -> IO b =
  \@a @b (f :: a -> b) (x :: a) ->
    coerce @(_ -> IO) (io.L1 @a @b f x)
diff.L1 :: List Int -> List Int -> List Int =
  \(xs :: List Int) (ys :: List Int) ->
    case xs of
    | Nil -> Nil @Int
    | Cons x xs' ->
      case ys of
      | Nil -> xs
      | Cons y ys' ->
        case lt_int x y of
        | False ->
          case eq_int x y of
          | False -> diff.L1 xs ys'
          | True -> diff.L1 xs' ys'
        | True -> Cons @Int x (diff.L1 xs' ys)
range.L1 :: Int -> Int -> List Int =
  \(m :: Int) (n :: Int) ->
    case le_int m n of
    | False -> Nil @Int
    | True -> Cons @Int m (range.L1 (add_int m 1) n)
solve_aux.L1 :: Int -> List Int -> Int -> List Int =
  \(k :: Int) (ls :: List Int) (i :: Int) ->
    diff.L1
      ls
      (Cons
         @Int
         (sub_int k i)
         (Cons @Int k (Cons @Int (add_int k i) (Nil @Int))))
solve_aux.L2 :: List Int -> List (List Int) -> Int -> List (List Int) =
  \(ints :: List Int) (kss :: List (List Int)) (k :: Int) ->
    functorList.map.L1
      @(List Int)
      @(List Int)
      (Cons @Int k)
      (solve_aux.L3
         ints
         (zip_with.L1
            @(List Int) @Int @(List Int) (solve_aux.L1 k) kss ints))
solve_aux.L3 :: List Int -> List (List Int) -> List (List Int) =
  \(ints :: List Int) (kss :: List (List Int)) ->
    case kss of
    | Nil -> Cons @(List Int) (Nil @Int) (Nil @(List Int))
    | Cons ks kss ->
      let monoid.m :: Monoid (List (List Int)) =
            .Monoid
              @(List (List Int))
              (monoidList.empty @(List Int))
              (monoidList.append.L1 @(List Int))
      in
      let f :: Int -> List (List Int) = solve_aux.L2 ints kss in
      foldableList.foldr.L1
        @Int
        @(List (List Int))
        (foldMap.L1 @Int @(List (List Int)) monoid.m f)
        (case monoid.m of
         | .Monoid empty _ -> empty)
        ks
main.L1 :: Int -> IO Unit =
  \(n :: Int) ->
    print
      (let f :: List Int -> Int = length.L1 @(List Int) in
       foldableList.foldr.L1
         @(List Int)
         @Int
         (foldMap.L1 @(List Int) @Int monoidInt f)
         monoidInt.empty
         (let ints :: List Int = range.L1 1 n in
          solve_aux.L3 ints (replicate.L1 @(List Int) n ints)))
================================================================================
asm eq
asm lt
asm le
asm add
asm sub
asm seq
asm puti
asm geti
let monoidInt = Pack{0,2} @monoidInt.empty $add
let print = @io.L2 $puti
let input = @io.L1 $geti Pack{0,0}
let main = @monadIO.bind.L1 @input @main.L1
let monoidInt.empty = 0
let monoidList.empty = Pack{0,0}
let foldMap.L1 monoid.m f x =
  (match monoid.m[3] with
   | {0} _ append -> append[1]) (f[2] x[1])
let length.L1 x = 1
let monoidList.append.L1 xs ys =
  @foldableList.foldr.L1 Pack{1,2} ys[1] xs[2]
let functorList.map.L1 f xs =
  match xs[1] with
  | {0} -> Pack{0,0}
  | {1} x xs ->
    Pack{1,2} (f[4] x[2]) (@functorList.map.L1 f[4] xs[1])
let foldableList.foldr.L1 f y0 xs =
  match xs[1] with
  | {0} -> y0[2]
  | {1} x xs -> f[5] x[2] (@foldableList.foldr.L1 f[5] y0[4] xs[1])
let replicate.L1 n x =
  match $le n[2] 0 with
  | {0} -> Pack{1,2} x[1] (@replicate.L1 ($sub n[2] 1) x[1])
  | {1} -> Pack{0,0}
let zip_with.L1 f xs ys =
  match xs[2] with
  | {0} -> Pack{0,0}
  | {1} x xs ->
    match ys[3] with
    | {0} -> Pack{0,0}
    | {1} y ys ->
      Pack{1,2} (f[7] x[4] y[2]) (@zip_with.L1 f[7] xs[3] ys[1])
let monadIO.bind.L1 mx f world0 =
  match mx[3] world0[1] with
  | {0} x world1 -> (f[4] x[2]) world1[1]
let io.L1 f x world =
  let y = f[3] x[2] in
  $seq y[1] (Pack{0,2} y[1] world[2])
let io.L2 f x = @io.L1 f[2] x[1]
let diff.L1 xs ys =
  match xs[2] with
  | {0} -> Pack{0,0}
  | {1} x xs' ->
    match ys[3] with
    | {0} -> xs[4]
    | {1} y ys' ->
      match $lt x[4] y[2] with
      | {0} ->
        match $eq x[4] y[2] with
        | {0} -> @diff.L1 xs[6] ys'[1]
        | {1} -> @diff.L1 xs'[3] ys'[1]
      | {1} -> Pack{1,2} x[4] (@diff.L1 xs'[3] ys[5])
let range.L1 m n =
  match $le m[2] n[1] with
  | {0} -> Pack{0,0}
  | {1} -> Pack{1,2} m[2] (@range.L1 ($add m[2] 1) n[1])
let solve_aux.L1 k ls i =
  @diff.L1 ls[2] (Pack{1,2} ($sub k[3] i[1]) (Pack{1,2} k[3] (Pack{1,2} ($add k[3] i[1]) Pack{0,0})))
let solve_aux.L2 ints kss k =
  @functorList.map.L1 (Pack{1,2} k[1]) (@solve_aux.L3 ints[3] (@zip_with.L1 (@solve_aux.L1 k[1]) kss[2] ints[3]))
let solve_aux.L3 ints kss =
  match kss[1] with
  | {0} -> Pack{1,2} Pack{0,0} Pack{0,0}
  | {1} ks kss ->
    let monoid.m = Pack{0,2} @monoidList.empty @monoidList.append.L1 in
    let f = @solve_aux.L2 ints[5] kss[2] in
    @foldableList.foldr.L1 (@foldMap.L1 monoid.m[2] f[1]) (match monoid.m[2] with
                                                           | {0} empty _ -> empty[2]) ks[4]
let main.L1 n =
  @print let f = @length.L1 in
         @foldableList.foldr.L1 (@foldMap.L1 @monoidInt f[1]) @monoidInt.empty let ints =
                                                                                     @range.L1 1 n[2]
                                                                               in
                                                                               @solve_aux.L3 ints[1] (@replicate.L1 n[3] ints[1])
