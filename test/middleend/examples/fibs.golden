data Unit =
       | Unit
data Bool =
       | False
       | True
data Pair a b =
       | Pair a b
data Option a =
       | None
       | Some a
data Choice a b =
       | First a
       | Second b
data Eq a =
       | .Eq (a -> a -> Bool)
data Ord a =
       | .Ord (Eq a) (a -> a -> Bool) (a -> a -> Bool) (a -> a -> Bool) (a -> a -> Bool)
data Monoid m =
       | .Monoid m (m -> m -> m)
data Ring a =
       | .Ring (a -> a) (a -> a -> a) (a -> a -> a) (a -> a -> a)
data Char
data Functor f =
       | .Functor (forall a b. (a -> b) -> f a -> f b)
data Foldable t =
       | .Foldable (forall a b. (a -> b -> b) -> b -> t a -> b) (forall a b. (b -> a -> b) -> b -> t a -> b)
data List a =
       | Nil
       | Cons a (List a)
data Monad m =
       | .Monad (Functor m) (forall a. a -> m a) (forall a b. m a -> (a -> m b) -> m b)
data World
data IO a = World -> Pair a World
external abort :: forall a. a = "abort"
external lt_int :: Int -> Int -> Bool = "lt"
external le_int :: Int -> Int -> Bool = "le"
external add_int :: Int -> Int -> Int = "add"
external sub_int :: Int -> Int -> Int = "sub"
external mul_int :: Int -> Int -> Int = "mul"
external seq :: forall a b. a -> b -> b = "seq"
external puti :: Int -> Unit = "puti"
external geti :: Unit -> Int = "geti"
print :: Int -> IO Unit = io.L2 @Int @Unit puti
input :: IO Int = coerce @(_ -> IO) (io.L1 @Unit @Int geti Unit)
prime :: Int = add_int (mul_int 1000000 1000000) 39
fibs0 :: List Int = Cons @Int 0 fibs1
fibs1 :: List Int =
  Cons
    @Int 1 (zip_with.L1 @Int @Int @Int add_mod_prime.L1 fibs0 fibs1)
main :: IO Unit =
  coerce @(_ -> IO) (monadIO.bind.L1 @Int @Unit input main.L1)
nth_exn.L1 :: forall a. List a -> Int -> a =
  \@a (xs :: List a) (n :: Int) ->
    case xs of
    | Nil -> abort @a
    | Cons x xs ->
      case le_int n 0 of
      | False -> nth_exn.L1 @a xs (sub_int n 1)
      | True -> x
zip_with.L1 :: forall a b c. (a -> b -> c) -> List a -> List b -> List c =
  \@a @b @c (f :: a -> b -> c) (xs :: List a) (ys :: List b) ->
    case xs of
    | Nil -> Nil @c
    | Cons x xs ->
      case ys of
      | Nil -> Nil @c
      | Cons y ys -> Cons @c (f x y) (zip_with.L1 @a @b @c f xs ys)
monadIO.bind.L1 :: forall a b. IO a -> (a -> IO b) -> World -> Pair b World =
  \@a @b (mx :: IO a) (f :: a -> IO b) (world0 :: World) ->
    case coerce @(IO -> _) mx world0 of
    | Pair x world1 -> coerce @(IO -> _) (f x) world1
io.L1 :: forall a b. (a -> b) -> a -> World -> Pair b World =
  \@a @b (f :: a -> b) (x :: a) (world :: World) ->
    let y :: b = f x in
    seq @b @(Pair b World) y (Pair @b @World y world)
io.L2 :: forall a b. (a -> b) -> a -> IO b =
  \@a @b (f :: a -> b) (x :: a) ->
    coerce @(_ -> IO) (io.L1 @a @b f x)
add_mod_prime.L1 :: Int -> Int -> Int =
  \(x :: Int) (y :: Int) ->
    let z :: Int = add_int x y in
    case lt_int z prime of
    | False -> sub_int z prime
    | True -> z
main.L1 :: Int -> IO Unit =
  \(n :: Int) -> print (nth_exn.L1 @Int fibs0 n)
================================================================================
asm abort
asm lt
asm le
asm add
asm sub
asm mul
asm seq
asm puti
asm geti
let print = @io.L2 $puti
let input = @io.L1 $geti Pack{0,0}
let prime = $add ($mul 1000000 1000000) 39
let fibs0 = Pack{1,2} 0 @fibs1
let fibs1 =
  Pack{1,2} 1 (@zip_with.L1 @add_mod_prime.L1 @fibs0 @fibs1)
let main = @monadIO.bind.L1 @input @main.L1
let nth_exn.L1 xs n =
  match xs[2] with
  | {0} -> $abort
  | {1} x xs ->
    match $le n[3] 0 with
    | {0} -> @nth_exn.L1 xs[1] ($sub n[3] 1)
    | {1} -> x[2]
let zip_with.L1 f xs ys =
  match xs[2] with
  | {0} -> Pack{0,0}
  | {1} x xs ->
    match ys[3] with
    | {0} -> Pack{0,0}
    | {1} y ys ->
      Pack{1,2} (f[7] x[4] y[2]) (@zip_with.L1 f[7] xs[3] ys[1])
let monadIO.bind.L1 mx f world0 =
  match mx[3] world0[1] with
  | {0} x world1 -> (f[4] x[2]) world1[1]
let io.L1 f x world =
  let y = f[3] x[2] in
  $seq y[1] (Pack{0,2} y[1] world[2])
let io.L2 f x = @io.L1 f[2] x[1]
let add_mod_prime.L1 x y =
  let z = $add x[2] y[1] in
  match $lt z[1] @prime with
  | {0} -> $sub z[1] @prime
  | {1} -> z[1]
let main.L1 n = @print (@nth_exn.L1 @fibs0 n[1])
