import std/prelude

val int_eq : Int -> Int -> Bool
let int_eq = abort

-- A type class is defined by:
class Eq a : { eq : a -> a -> Bool }

-- It desugars to:
type Eq_dict a =
  | Eq_dict (a -> a -> Bool)

val run_eq : Eq_dict a -> a -> a -> Bool
let run_eq dict =
  match dict with
  | Eq_dict eq -> eq

-- An instance is given by:
instance Eq Int = { eq = int_eq }

-- It desugars to:
val int_Eq_dict : Eq_dict Int
let int_Eq_dict = Eq_dict int_eq

-- A more complicated istance is:
instance Eq (List a) = (Eq a) =>
  { eq xs0 ys0 =
      match xs0 with
      | Nil ->
          match ys0 with
          | Nil      -> True
          | Cons _ _ -> False
      | Cons x xs1 ->
          match ys0 with
          | Nil        -> False
          | Cons y ys1 -> eq x y && eq xs1 ys1
  }

-- It desugars to:
val list_Eq_dict : Eq_dict a -> Eq_dict (List a)
let rec list_Eq_dict elt_dict =
  Eq_dict
    (fun xs0 ys0 ->
      match xs0 with
      | Nil ->
          (match ys0 with
          | Nil      -> True
          | Cons _ _ -> False
          )
      | Cons x xs1 ->
          (match ys0 with
          | Nil        -> False
          | Cons y ys1 -> run_eq elt_dict x y && run_eq (list_Eq_dict elt_dict) xs1 ys1
          )
    )

val main : IO Unit
let main = return Unit
