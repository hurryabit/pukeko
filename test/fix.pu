import std/prelude

id : a -> a
id x = x

-- Fixpoint of a functor
type Fix f =
  | Fix (f (Fix f))

cata : ((Fix f -> a) -> f (Fix f) -> f a) -> (f a -> a) -> Fix f -> a
cata fmap f x =
  match x with
  | Fix y -> f (fmap (cata fmap f) y)

ana : ((a -> Fix f) -> f a -> f (Fix f)) -> (a -> f a) -> a -> Fix f
ana fmap f x = Fix (fmap (ana fmap f) (f x))

mapFix : ((a -> b) -> (Fix (f a) -> Fix (f b)) -> f a (Fix (f a)) -> f b (Fix (f b)))
       -> (a -> b) -> Fix (f a) -> Fix (f b)
mapFix bimap f x =
  match x with
  | Fix y -> Fix (bimap f (mapFix bimap f) y)


-- Bifunctor whose fixpoint is isomorphic to lists
type ListF a b =
  | NilF
  | ConsF a b

bimapListF : (a1 -> a2) -> (b1 -> b2) -> ListF a1 b1 -> ListF a2 b2
bimapListF f g x =
  match x with
  | NilF      -> NilF
  | ConsF y z -> ConsF (f y) (g z)

mapFixList : (a -> b) -> Fix (ListF a) -> Fix (ListF b)
mapFixList = mapFix bimapListF

toList : Fix (ListF a) -> List a
toList = cata (bimapListF id) (fun x ->
  match x with
  | NilF       -> Nil
  | ConsF y ys -> Cons y ys)

fromList : List a -> Fix (ListF a)
fromList = ana (bimapListF id) (fun x ->
  match x with
  | Nil       -> NilF
  | Cons y ys -> ConsF y ys)


main : IO Unit
main =
  input
  >>= fun n ->
  sequence_io (replicate n input)
  >>= fun xs ->
  iter_io print (toList (mapFixList (fun x -> 2*x) (fromList xs)))
