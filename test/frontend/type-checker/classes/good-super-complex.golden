data C a =
       | .C (a -> a)
c :: forall a. C a -> a -> a =
  \@a (dict :: C a) ->
    case dict of
    | .C c -> c
data D a =
       | .D (C a) (a -> a)
D.C :: forall a. D a -> C a =
  \@a (dict :: D a) ->
    case dict of
    | .D D.C _ -> D.C
d :: forall a. D a -> a -> a =
  \@a (dict :: D a) ->
    case dict of
    | .D _ d -> d
f :: forall a. D a -> a -> a =
  \@a (d.a :: D a) ->
    let g :: forall _5. C _5 -> D _5 -> _5 -> _5 =
          \@_5 (c._5 :: C _5) (d._5 :: D _5) (x :: _5) ->
            c @_5 c._5 (d @_5 d._5 x)
    in
    g @a (D.C @a d.a) d.a
