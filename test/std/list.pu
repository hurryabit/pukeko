import std/basic
import std/bool
import std/int

-- Lists
type List a =
  | Nil
  | Cons a (List a)

foldr : (a -> b -> b) -> b -> List a -> b
foldr f y0 xs =
  match xs with
  | Nil       -> y0
  | Cons x xs -> f x (foldr f y0 xs)

foldl : (b -> a -> b) -> b -> List a -> b
foldl f y0 xs =
  match xs with
  | Nil -> y0
  | Cons x xs -> foldl f (f y0 x) xs

take : Int -> List a -> List a
take n xs =
  if n <= 0 then
    Nil
  else
    match xs with
    | Nil       -> Nil
    | Cons x xs -> Cons x (take (n-1) xs)

nth : List a -> Int -> a
nth xs n =
  match xs with
  | Nil -> abort
  | Cons x xs -> if n <= 0 then x else nth xs (n-1)

zip_with : (a -> b -> c) -> List a -> List b -> List c
zip_with f xs ys =
  match xs with
  | Nil -> Nil
  | Cons x xs ->
    match ys with
    | Nil -> Nil
    | Cons y ys -> Cons (f x y) (zip_with f xs ys)

partition : (a -> Bool) -> List a -> Pair (List a) (List a)
partition p xs =
  let rec part_p xs =
    match xs with
    | Nil -> Pair Nil Nil
    | Cons x xs ->
      match part_p xs with
      | Pair ys zs ->
        if p x then
          Pair (Cons x ys) zs
        else
          Pair ys (Cons x zs)
  in
  part_p xs

append : List a -> List a -> List a
append xs ys =
  match xs with
  | Nil -> ys
  | Cons x xs -> Cons x (append xs ys)

concat : List (List a) -> List a
concat = foldr append Nil

map : (a -> b) -> List a -> List b
map f xs =
  match xs with
  | Nil -> Nil
  | Cons x xs -> Cons (f x) (map f xs)

concat_map : (a -> List b) -> List a -> List b
concat_map f xs = concat (map f xs)

length : List a -> Int
length = foldr (fun x l -> 1+l) 0

replicate : Int -> a -> List a
replicate n x =
  if n <= 0 then Nil else Cons x (replicate (n-1) x)
