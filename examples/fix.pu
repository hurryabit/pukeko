import std2/prelude

-- Fixpoint of a functor
type Fix f = f (Fix f)

fix :: f (Fix f) -> Fix f
fix x = coerce @(_ -> Fix) x

unFix :: Fix f -> f (Fix f)
unFix x = coerce @(Fix -> _) x

cata :: (Functor f) => (f a -> a) -> Fix f -> a
cata f = f ∘ map (cata f) ∘ unFix

ana :: (Functor f) => (a -> f a) -> a -> Fix f
ana f = fix ∘ map (ana f) ∘ f

hylo :: (Functor f) => (f b -> b) -> (a -> f a) -> a -> b
hylo f g = cata f ∘ ana g

class Bifunctor p where
  bimap :: (a1 -> a2) -> (b1 -> b2) -> p a1 b1 -> p a2 b2

type Fix2 p a = p a (Fix2 p a)

fix2 :: p a (Fix2 p a) -> Fix2 p a
fix2 x = coerce @(_ -> Fix2) x

unFix2 :: Fix2 p a -> p a (Fix2 p a)
unFix2 x = coerce @(Fix2 -> _) x

instance functorFox2 :: (Bifunctor p) => Functor (Fix2 p) where
  map f = fix2 ∘ bimap f (map f) ∘ unFix2

poly :: (Bifunctor p) => Fix (p a) -> Fix2 p a
poly = fix2 ∘ bimap id poly ∘ unFix

mono :: (Bifunctor p) => Fix2 p a -> Fix (p a)
mono = fix ∘ bimap id mono ∘ unFix2

type FixPoly p a = Fix (p a)

fixPoly :: Fix (p a) -> FixPoly p a
fixPoly x = coerce @(_ -> FixPoly) x

unFixPoly :: FixPoly p a -> Fix (p a)
unFixPoly x = coerce @(FixPoly -> _) x

instance functorFixPoly :: (Bifunctor p) => Functor (FixPoly p) where
  map f = fixPoly ∘ mono ∘ map f ∘ poly ∘ unFixPoly


-- Bifunctor whose fixpoint is isomorphic to lists
data ListF a b = NilF | ConsF a b

instance functorListF :: Functor (ListF a) where
  map = bimap id

instance bifunctorListF :: Bifunctor ListF where
  bimap f g x =
    case x of
      NilF      -> NilF
      ConsF y z -> ConsF (f y) (g z)

toList :: Fix2 ListF a -> List a
toList = cata (\x ->
  case x of
    NilF       -> Nil
    ConsF y ys -> Cons y ys) ∘ mono

fromList :: List a -> Fix2 ListF a
fromList = poly ∘ ana (\x ->
  case x of
    Nil       -> NilF
    Cons y ys -> ConsF y ys)


main :: IO Unit
main =
  input
  >>= \n ->
  sequence (replicate n input)
  >>= \xs ->
  traverse_ print (toList (map (\x -> 2*x) (fromList xs)))
