import std2/prelude

gen :: (a -> a) -> a -> List a
gen f x = Cons x (gen f (f x))

split_at :: Int -> List a -> Pair (List a) (List a)
split_at n xs =
  if n <= 0 then
    Pair Nil xs
  else
    case xs of
    | Nil -> Pair Nil Nil
    | Cons x xs ->
      case split_at (n-1) xs of
      | Pair ys zs -> Pair (Cons x ys) zs

random :: List Int
random = gen (\x -> (91*x) % 1000000007) 1

main :: IO Unit
main =
  let n = 400000 in
  print n;
  let m = 100000 in
  print m;
  case split_at n random of
  | Pair xs random ->
    traverse_ print xs;
    case split_at m random of
    | Pair ys random ->
      let zs = take m random in
      sequence (
        zip_with
          (\y z ->
             let y = y % n in
             let z = z % n in
             if y < z then
               (print y; print z)
             else
               (print z; print y))
          ys
          zs)
      >>= \x ->
      pure Unit
