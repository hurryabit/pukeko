import std2/prelude

diff :: List Int -> List Int -> List Int
diff xs ys =
  case xs of
    Nil -> Nil
    Cons x xs' ->
      case ys of
        Nil -> xs
        Cons y ys' ->
          if x < y then
            Cons x (diff xs' ys)
          else if x == y then
            diff xs' ys'
          else
            diff xs ys'

ints :: List Int
ints =
  let rec go k = Cons k (go (k+1)) in
  go 1

solve_aux :: List (List Int) -> List (List Int)
solve_aux kss =
  case kss of
    Nil -> Cons Nil Nil
    Cons ks kss ->
      foldMap (\k ->
        map (Cons k)
          (solve_aux (zip_with (\ls i ->
              diff ls (Cons (k-i) (Cons k (Cons (k+i) Nil))))
            kss
            ints)))
      ks

solve :: Int -> List (List Int)
solve n = solve_aux (replicate n (take n ints))

main :: IO Unit
main =
  input
  >>= \n ->
  print (length (solve n))
