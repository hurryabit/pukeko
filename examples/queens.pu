import std2/prelude

diff :: List Int -> List Int -> List Int
diff xs ys =
  case xs of
    Nil -> Nil
    Cons x xs' ->
      case ys of
        Nil -> xs
        Cons y ys' ->
          if x < y then
            Cons x (diff xs' ys)
          else if x == y then
            diff xs' ys'
          else
            diff xs ys'

range :: Int -> Int -> List Int
range m n  = if m <= n then Cons m (range (m+1) n) else Nil

solve_aux :: List Int -> List (List Int) -> List (List Int)
solve_aux ints kss =
  case kss of
    Nil -> Cons Nil Nil
    Cons ks kss ->
      foldMap (\k ->
        map (Cons k)
          (solve_aux ints (zip_with (\ls i ->
              diff ls (Cons (k-i) (Cons k (Cons (k+i) Nil))))
            kss
            ints)))
      ks

solve :: Int -> List (List Int)
solve n =
  let ints = range 1 n
  in  solve_aux ints (replicate n ints)

main :: IO Unit
main =
  input
  >>= \n ->
  print (length (solve n))
